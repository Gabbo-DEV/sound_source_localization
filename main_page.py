# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import json
import matplotlib.pyplot as plt

from acoustic_locator import AcousticLocator
from PyQt5 import QtCore, QtGui, QtWidgets

from about import Ui_AboutWindow
from plot_canvas import PlotCanvas



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(230, 70, 261, 91))
        
        font = QtGui.QFont()
        font.setPointSize(27)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        self.menuAbout = QtWidgets.QMenu(self.menubar)
        self.menuAbout.setObjectName("menuAbout")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionNew = QtWidgets.QAction(MainWindow)
        self.actionNew.setObjectName("actionNew")
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setObjectName("actionSave")
        self.actionCopy = QtWidgets.QAction(MainWindow)
        self.actionCopy.setObjectName("actionCopy")
        self.actionPaste = QtWidgets.QAction(MainWindow)
        self.actionPaste.setObjectName("actionPaste")
        self.actionAbout = QtWidgets.QAction(MainWindow, )
        self.actionAbout.setObjectName("actionAbout")
        self.menuAbout.addAction(self.actionAbout)
        self.menubar.addAction(self.menuAbout.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.actionAbout.triggered.connect(lambda: self.openAboutPage())

        canvas = PlotCanvas(self)
        print("dopo canvas")
        run_localization(canvas.getAx())

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Localizzazione acustica"))
        self.menuAbout.setTitle(_translate("MainWindow", "About"))
        self.actionNew.setText(_translate("MainWindow", "New"))
        self.actionSave.setText(_translate("MainWindow", "Save"))
        self.actionCopy.setText(_translate("MainWindow", "Copy"))
        self.actionPaste.setText(_translate("MainWindow", "Paste"))
        self.actionAbout.setText(_translate("MainWindow", "About"))


    def openAboutPage(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_AboutWindow()
        self.ui.setupUi(self.window)
        self.window.show()



def getBeaconsPositions():
    f = open('config.json')
    jsonFile = json.load(f)

    data = []
    for i in range(1, 4):
        coordinates = [jsonFile[f'beacon{i}']['coordinates']
                       [0], jsonFile[f'beacon{i}']['coordinates'][1]]
        data.append(coordinates)

    f.close()
    return data


def getBeaconsFrequencies():
    f = open('config.json')
    jsonFile = json.load(f)

    data = []
    for i in range(1, 4):
        frequency = jsonFile[f'beacon{i}']['frequency']
        data.append(frequency)

    f.close()
    return data


def run_localization(ax):
    print("run")
    try:
        beacon_positions = getBeaconsPositions()
        beacon_frequencies = getBeaconsFrequencies()
    except FileNotFoundError:
        exit('\033[91m' + 'Error! Configuration file not found')

    receiver_positions = []
    acoustic_localizer = AcousticLocator(beacon_positions, beacon_frequencies)

    while True:
        input_signal = acoustic_localizer.record_audio()
        outs = acoustic_localizer.compute_convolution(input_signal)
        powers = acoustic_localizer.compute_powers(outs)
        position, r = acoustic_localizer.compute_position(powers)
        receiver_positions.append(position)
        print(position)
        acoustic_localizer.plot_position(receiver_positions, beacon_positions, r, ax)



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())


